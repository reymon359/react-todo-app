{"version":3,"sources":["TodoItem.js","todosData.js","components/Header.js","components/jokes/Joke.js","components/jokes/jokesData.js","components/jokes/Jokes.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","react_default","a","createElement","className","type","checked","item","completed","onChange","handleChange","id","style","fontStyle","color","textDecoration","text","todosData","Header","timeOfDay","hours","Date","getHours","Joke","display","question","punchLine","jokesData","Jokes","jokeComponents","sort","Math","random","slice","map","joke","jokes_Joke","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todos","isLoading","newTodo","bind","assertThisInitialized","handleFormChange","handleSubmit","_this2","setTimeout","setState","prevState","todo","event","_event$target","target","name","value","defineProperty","length","unshift","preventDefault","render","_this3","todoItems","src_TodoItem","components_Header","onSubmit","placeholder","disabled","textAlign","jokes_Jokes","React","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.906194fb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction TodoItem(props){\r\n\r\n    // To style the completed items\r\n    const completedStyle = {\r\n        fontStyle: \"italic\",\r\n        color: \"#cdcdcd\",\r\n        textDecoration: \"line-through\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-item\">\r\n            <input \r\n                type=\"checkbox\" \r\n                checked={props.item.completed} \r\n                onChange={() => props.handleChange(props.item.id)}\r\n            />\r\n            <p style={props.item.completed ? completedStyle: null}>{props.item.text}</p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TodoItem;","const todosData = [{\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean gecko tank\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Mow lawn\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on Arrested Development\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","import React from 'react'\r\n\r\n\r\nfunction Header(){\r\n\r\n    const date = new Date()\r\n    const hours = date.getHours()\r\n    let timeOfDay\r\n    \r\n    if (hours < 12) {\r\n      timeOfDay = \"morning\"\r\n    } else if (hours >= 12 && hours < 17) {\r\n      timeOfDay = \"afternoon\"\r\n    } else {\r\n      timeOfDay = \"night\"\r\n    }\r\n\r\n    return (\r\n        <header className=\"navbar\">\r\n            <div>Todo App</div> \r\n            <small>Good {timeOfDay}! Here you can write your tasks</small>\r\n        </header>\r\n    )\r\n\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nfunction Joke(props) {\r\n    return (\r\n        <div className=\"joke\">\r\n            <p style={{display: !props.question && \"none\"}}>Question: {props.question}</p>\r\n            <p style={{color: !props.question && \"#888888\"}}>Answer: {props.punchLine}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Joke","const jokesData = [{\r\n        id: 1,\r\n        punchLine: \"Itâ€™s hard to explain puns to kleptomaniacs because they always take things literally.\"\r\n    },\r\n    {\r\n        id: 2,\r\n        question: \"What's the best thing about Switzerland?\",\r\n        punchLine: \"I don't know, but the flag is a big plus!\"\r\n    },\r\n    {\r\n        id: 3,\r\n        question: \"Did you hear about the mathematician who's afraid of negative numbers?\",\r\n        punchLine: \"He'll stop at nothing to avoid them!\"\r\n    },\r\n    {\r\n        id: 4,\r\n        question: \"Hear about the new restaurant called Karma?\",\r\n        punchLine: \"Thereâ€™s no menu: You get what you deserve.\"\r\n    },\r\n    {\r\n        id: 5,\r\n        question: \"Did you hear about the actor who fell through the floorboards?\",\r\n        punchLine: \"He was just going through a stage.\"\r\n    },\r\n    {\r\n        id: 6,\r\n        question: \"Did you hear about the claustrophobic astronaut?\",\r\n        punchLine: \"He just needed a little space.\"\r\n    }\r\n]\r\n\r\nexport default jokesData","import React from \"react\"\r\n\r\nimport Joke from \"./Joke\"\r\n\r\nimport jokesData from \"./jokesData\"\r\n\r\nfunction Jokes() {\r\n    \r\n    // Using map to go through all the jokes in jokesData\r\n    const jokeComponents = jokesData.sort(() => Math.random() - 0.5).slice(0, 2).map(joke => <Joke key={joke.id} question={joke.question} punchLine={joke.punchLine} />)\r\n \r\n                \r\n    return (\r\n        <div  className=\"jokes\">\r\n            <b>By the way here are some jokesðŸ˜„.</b>\r\n            {jokeComponents}            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jokes","import React from 'react';\nimport TodoItem from './TodoItem';\nimport todosData from './todosData';\n\n// Components\nimport Header from './components/Header';\nimport Jokes from './components/jokes/Jokes';\n// import logo from './logo.svg';\n// import './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n        todos: todosData,\n        isLoading: true,\n        newTodo: \"\"\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleFormChange = this.handleFormChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  // Fake Loader\n  componentDidMount() {\n    setTimeout(() => {\n        this.setState({\n            isLoading: false\n        })\n    }, 2000)\n  }\n\n\n  // Creating a new array where if the item has the same id as the\n  // one passed in the params we change its completed value\n  handleChange(id) {\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n          if (todo.id === id) {\n              todo.completed = !todo.completed\n          }\n          return todo\n      })\n      return { todos: updatedTodos }\n    })\n  }\n  \n  // New todo form\n  handleFormChange(event){\n    const {name, value} = event.target\n    this.setState({\n        [name]: value\n    })\n  }\n\n  handleSubmit(event){\n    \n    const newTodo =  {\n      id: this.state.todos.length + 1,\n      text: this.state.newTodo,\n      completed: false\n    }\n    this.state.todos.unshift(newTodo);\n    event.preventDefault();\n    this.render();\n    this.setState({newTodo: \"\"})\n  }\n\n  render() {\n    const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item}\n    handleChange={this.handleChange }\n    />)\n    \n    return (\n      <div>\n        <Header />\n        <div className=\"new-todo-form\">\n          <form onSubmit={this.handleSubmit}>\n          <input name=\"newTodo\" value={this.state.newTodo} onChange={this.handleFormChange} placeholder=\"New task\" /><br />\n          <button disabled={this.state.newTodo === \"\"} >Submit</button>\n          </form>\n        </div>\n       \n        <div className=\"todo-list\">\n          {todoItems}\n        </div>\n\n        {this.state.isLoading ?\n        <h1 style={{textAlign: \"center\"}}>Loading...</h1> :\n          <Jokes />}        \n      </div>\n    )    \n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// We select where we are going to render the apps \n// which is in the root element we created in the index\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}